version: "3"

#  Uncomment to fix issue: Could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network
networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
#    ipam:
#      config:
#        - subnet: 172.50.0.0/16
  backend:
    driver: ${NETWORKS_DRIVER}
#    ipam:
#      config:
#        - subnet: 172.50.0.0/16

volumes:
  percona:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  opensearch:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  phpmyadmin:
    driver: ${VOLUMES_DRIVER}
  adminer:
    driver: ${VOLUMES_DRIVER}

services:
### NGINX Server #########################################
  nginx:
    container_name: ${CONTAINER_NGINX_NAME:-nginx}
    build:
      context: ./nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
      - "${VARNISH_BACKEND_PORT}:81"
    extra_hosts:
      - "${EXTRA_HOST}:host-gateway"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend

### PHP-FPM ##############################################
  php-fpm:
    container_name: ${CONTAINER_PHP_NAME:-php-fpm}
    build:
      context: ./php-fpm
      args:
        - PHP_VERSION=${PHP_VERSION:-7.4}
        - XDEBUG_PORT=${XDEBUG_PORT}
        - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
    extra_hosts:
      - "${EXTRA_HOST}:host-gateway"
    networks:
      - backend
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}

### CRON ##############################################
  cron:
    extends:
      service: php-fpm
    container_name: ${CONTAINER_CRON_NAME:-cron}
    build:
      context: ./cron
      args:
        - CONTAINER_PHP_NAME=${CONTAINER_PHP_NAME:-php-fpm}
    networks:
      - backend
    volumes:
      - ./cron/crontab:/etc/cron.d/magento-cron
    depends_on:
      - php-fpm

### Percona ################################################
  percona:
    container_name: ${CONTAINER_PERCONA_NAME:-percona}
    build:
      context: ./percona
    environment:
      - MYSQL_DATABASE=${PERCONA_DATABASE}
      - MYSQL_USER=${PERCONA_USER}
      - MYSQL_PASSWORD=${PERCONA_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${PERCONA_ROOT_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/percona:/var/lib/mysql
      - ${PERCONA_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${PERCONA_PORT}:3306"
    networks:
      - backend

### phpMyAdmin ###########################################
#  phpmyadmin:
#    build: ./phpmyadmin
#    environment:
#      - PMA_ARBITRARY=1
#      - MYSQL_USER=${PMA_USER}
#      - MYSQL_PASSWORD=${PMA_PASSWORD}
#      - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
#      - MAX_EXECUTION_TIME=${PMA_MAX_EXECUTION_TIME}
#      - MEMORY_LIMIT=${PMA_MEMORY_LIMIT}
#      - UPLOAD_LIMIT=${PMA_UPLOAD_LIMIT}
#    ports:
#      - "${PMA_PORT}:80"
#    depends_on:
#      - "${PMA_DB_ENGINE}"
#    networks:
#      - frontend
#      - backend

### Adminer ###########################################
#  adminer:
#    build:
#      context: ./adminer
#      args:
#        - INSTALL_MSSQL=${ADM_INSTALL_MSSQL}
#    environment:
#      - ADMINER_PLUGINS=${ADM_PLUGINS}
#      - ADMINER_DESIGN=${ADM_DESIGN}
#      - ADMINER_DEFAULT_SERVER=${ADM_DEFAULT_SERVER}
#    ports:
#      - "${ADM_PORT}:8080"
#    depends_on:
#      - php-fpm
#    networks:
#      - frontend
#      - backend

### ElasticSearch ########################################
  elasticsearch:
    container_name: ${CONTAINER_ELASTICSEARCH_NAME:-elasticsearch}
    build:
      context: ./elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
      - node.name=${ELASTICSEARCH_NODE_NAME}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - indices.id_field_data.enabled=true
      - "ES_JAVA_OPTS=-Xms2G -Xmx2G"
      - discovery.type=single-node
      #- cluster.initial_master_nodes=${ELASTICSEARCH_MASTER_NODE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend

#  opensearch: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
#    container_name: ${CONTAINER_OPENSEARCH_NAME:-opensearch}
#    build:
#      context: ./opensearch
#      args:
#        - OPENSEARCH_VERSION=${OPENSEARCH_VERSION} # Specifying the latest available image - modify if you want a specific version
#    environment:
#      - cluster.name=${OPENSEARCH_CLUSTER_NAME}
#      - discovery.type=single-node
#      - bootstrap.memory_lock=true
#      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
#      - "DISABLE_INSTALL_DEMO_CONFIG=true" # disables execution of install_demo_configuration.sh bundled with security plugin, which installs demo certificates and security configurations to OpenSearch
#      - "DISABLE_SECURITY_PLUGIN=true" # disables security plugin entirely in OpenSearch by setting plugins.security.disabled: true in opensearch.yml
#    ulimits:
#      memlock:
#        soft: -1 # Set memlock to unlimited (no soft or hard limit)
#        hard: -1
#      nofile:
#        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
#        hard: 65536
#    volumes:
#      - opensearch:/usr/share/opensearch/data # Creates volume called opensearch and mounts it to the container
#    ports:
#      - "${OPENSEARCH_HOST_HTTP_PORT}:9200" # REST API
#      - "${OPENSEARCH_HOST_TRANSPORT_PORT}:9300"
#      - "${OPENSEARCH_HOST_PERFORMANCE_ANALYZER_PORT}:9600" # Performance Analyzer
#    networks:
#      - frontend
#      - backend


### Mailhog ################################################
  mailhog:
    container_name: ${CONTAINER_MAILHOG_NAME:-mailhog}
    build: ./mailhog
    ports:
      - "${MAILHOG_SENDMAIL_PORT}:1025"
      - "${MAILHOG_UI_PORT}:8025"
    networks:
      - frontend
      - backend

### SFTP ################################################
#  sftp_mmem:
#    image: atmoz/sftp
#    container_name: sftp_mmem
#    volumes:
#      - ./storage/sftp-data:/home/victor/upload
#    environment:
#      SFTP_USERS: "victor:password:1001"
#    networks:
#      - frontend
#      - backend

### Certbot #########################################
#  certbot:
#    build:
#      context: ./certbot
#    volumes:
#      - ./data/certbot/certs/:/var/certs
#      - ./certbot/letsencrypt/:/var/www/letsencrypt
#    environment:
#      - CN="fake.domain.com"
#      - EMAIL="fake.email@gmail.com"
#    networks:
#      - frontend

### Redis ################################################
#  redis:
#    build: ./redis
#    volumes:
#      - ${DATA_PATH_HOST}/redis:/data
#    command: --requirepass ${REDIS_PASSWORD}
#    ports:
#      - "${REDIS_PORT}:6379"
#    networks:
#      - backend

### Redis Cluster ##########################################
#  redis-cluster:
#    build: ./redis-cluster
#    ports:
#      - "${REDIS_CLUSTER_PORT_RANGE}:7000-7005"
#    networks:
#      - backend

### REDISWEBUI ################################################
#  redis-webui:
#    build:
#      context: ./redis-webui
#    environment:
#      - ADMIN_USER=${REDIS_WEBUI_USERNAME}
#      - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
#      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
#      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
#      - REDIS_1_AUTH=${REDIS_PASSWORD}
#    networks:
#      - backend
#    ports:
#      - "${REDIS_WEBUI_PORT}:80"
#    depends_on:
#      - redis

### Kibana ##############################################
#  kibana:
#    build:
#      context: ./kibana
#      args:
#        - ELK_VERSION=${ELK_VERSION}
#    ports:
#      - "${KIBANA_HTTP_PORT}:5601"
#    depends_on:
#      - elasticsearch
#    networks:
#      - frontend
#      - backend

### Varnish ##########################################
#  proxy:
#    container_name: proxy
#    build: ./varnish
#    expose:
#      - ${VARNISH_PORT}
#    environment:
#      - VARNISH_CONFIG=${VARNISH_CONFIG}
#      - CACHE_SIZE=${VARNISH_PROXY1_CACHE_SIZE}
#      - VARNISHD_PARAMS=${VARNISHD_PARAMS}
#      - VARNISH_PORT=${VARNISH_PORT}
#      - BACKEND_HOST=${VARNISH_PROXY1_BACKEND_HOST}
#      - BACKEND_PORT=${VARNISH_BACKEND_PORT}
#      - VARNISH_SERVER=${VARNISH_PROXY1_SERVER}
#    ports:
#      - "${VARNISH_PORT}:${VARNISH_PORT}"
#    networks:
#      - frontend
#
#  proxy2:
#    container_name: proxy2
#    build: ./varnish
#    expose:
#      - ${VARNISH_PORT}
#    environment:
#      - VARNISH_CONFIG=${VARNISH_CONFIG}
#      - CACHE_SIZE=${VARNISH_PROXY2_CACHE_SIZE}
#      - VARNISHD_PARAMS=${VARNISHD_PARAMS}
#      - VARNISH_PORT=${VARNISH_PORT}
#      - BACKEND_HOST=${VARNISH_PROXY2_BACKEND_HOST}
#      - BACKEND_PORT=${VARNISH_BACKEND_PORT}
#      - VARNISH_SERVER=${VARNISH_PROXY2_SERVER}
#    ports:
#      - "${VARNISH_PORT}:${VARNISH_PORT}"
#    networks:
#      - frontend


### RabbitMQ #############################################
#  rabbitmq:
#    container_name: ${CONTAINER_RABBITMQ_NAME:-rabbitmq}
#    build: ./rabbitmq
#    ports:
#      - "${RABBITMQ_NODE_HOST_PORT}:5672"
#      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
#      - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
#      - "${RABBITMQ_WEB_STOMP_HOST_PORT}:15674"
#    privileged: true
#    hostname: ${COMPOSE_PROJECT_NAME}-rabbitmq
#    volumes:
#      - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
#      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
#      - ./rabbitmq/management_agent.disable_metrics_collector.conf:/etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
#    depends_on:
#      - php-fpm
#    networks:
#      - backend
